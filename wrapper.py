# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Interface to orange text functions.
"""

import _wrapper
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _wrapper.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _wrapper.PySwigIterator_value(*args)
    def incr(*args): return _wrapper.PySwigIterator_incr(*args)
    def decr(*args): return _wrapper.PySwigIterator_decr(*args)
    def distance(*args): return _wrapper.PySwigIterator_distance(*args)
    def equal(*args): return _wrapper.PySwigIterator_equal(*args)
    def copy(*args): return _wrapper.PySwigIterator_copy(*args)
    def next(*args): return _wrapper.PySwigIterator_next(*args)
    def previous(*args): return _wrapper.PySwigIterator_previous(*args)
    def advance(*args): return _wrapper.PySwigIterator_advance(*args)
    def __eq__(*args): return _wrapper.PySwigIterator___eq__(*args)
    def __ne__(*args): return _wrapper.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _wrapper.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _wrapper.PySwigIterator___isub__(*args)
    def __add__(*args): return _wrapper.PySwigIterator___add__(*args)
    def __sub__(*args): return _wrapper.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _wrapper.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VectorStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStr, name)
    __repr__ = _swig_repr
    def iterator(*args): return _wrapper.VectorStr_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _wrapper.VectorStr___nonzero__(*args)
    def __len__(*args): return _wrapper.VectorStr___len__(*args)
    def pop(*args): return _wrapper.VectorStr_pop(*args)
    def __getslice__(*args): return _wrapper.VectorStr___getslice__(*args)
    def __setslice__(*args): return _wrapper.VectorStr___setslice__(*args)
    def __delslice__(*args): return _wrapper.VectorStr___delslice__(*args)
    def __delitem__(*args): return _wrapper.VectorStr___delitem__(*args)
    def __getitem__(*args): return _wrapper.VectorStr___getitem__(*args)
    def __setitem__(*args): return _wrapper.VectorStr___setitem__(*args)
    def append(*args): return _wrapper.VectorStr_append(*args)
    def empty(*args): return _wrapper.VectorStr_empty(*args)
    def size(*args): return _wrapper.VectorStr_size(*args)
    def clear(*args): return _wrapper.VectorStr_clear(*args)
    def swap(*args): return _wrapper.VectorStr_swap(*args)
    def get_allocator(*args): return _wrapper.VectorStr_get_allocator(*args)
    def begin(*args): return _wrapper.VectorStr_begin(*args)
    def end(*args): return _wrapper.VectorStr_end(*args)
    def rbegin(*args): return _wrapper.VectorStr_rbegin(*args)
    def rend(*args): return _wrapper.VectorStr_rend(*args)
    def pop_back(*args): return _wrapper.VectorStr_pop_back(*args)
    def erase(*args): return _wrapper.VectorStr_erase(*args)
    def __init__(self, *args): 
        this = _wrapper.new_VectorStr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _wrapper.VectorStr_push_back(*args)
    def front(*args): return _wrapper.VectorStr_front(*args)
    def back(*args): return _wrapper.VectorStr_back(*args)
    def assign(*args): return _wrapper.VectorStr_assign(*args)
    def resize(*args): return _wrapper.VectorStr_resize(*args)
    def insert(*args): return _wrapper.VectorStr_insert(*args)
    def reserve(*args): return _wrapper.VectorStr_reserve(*args)
    def capacity(*args): return _wrapper.VectorStr_capacity(*args)
    __swig_destroy__ = _wrapper.delete_VectorStr
    __del__ = lambda self : None;
VectorStr_swigregister = _wrapper.VectorStr_swigregister
VectorStr_swigregister(VectorStr)

class baseLemmatizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, baseLemmatizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, baseLemmatizer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _wrapper.delete_baseLemmatizer
    __del__ = lambda self : None;
    def getLemma(*args): return _wrapper.baseLemmatizer_getLemma(*args)
    def lemmatizeText(*args): return _wrapper.baseLemmatizer_lemmatizeText(*args)
baseLemmatizer_swigregister = _wrapper.baseLemmatizer_swigregister
baseLemmatizer_swigregister(baseLemmatizer)

class lemmatizer(baseLemmatizer):
    __swig_setmethods__ = {}
    for _s in [baseLemmatizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lemmatizer, name, value)
    __swig_getmethods__ = {}
    for _s in [baseLemmatizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, lemmatizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wrapper.new_lemmatizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wrapper.delete_lemmatizer
    __del__ = lambda self : None;
    def getLemma(*args): return _wrapper.lemmatizer_getLemma(*args)
lemmatizer_swigregister = _wrapper.lemmatizer_swigregister
lemmatizer_swigregister(lemmatizer)

class lemmagen(baseLemmatizer):
    __swig_setmethods__ = {}
    for _s in [baseLemmatizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, lemmagen, name, value)
    __swig_getmethods__ = {}
    for _s in [baseLemmatizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, lemmagen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wrapper.new_lemmagen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wrapper.delete_lemmagen
    __del__ = lambda self : None;
    def getLemma(*args): return _wrapper.lemmagen_getLemma(*args)
lemmagen_swigregister = _wrapper.lemmagen_swigregister
lemmagen_swigregister(lemmagen)

class porter(baseLemmatizer):
    __swig_setmethods__ = {}
    for _s in [baseLemmatizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, porter, name, value)
    __swig_getmethods__ = {}
    for _s in [baseLemmatizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, porter, name)
    __repr__ = _swig_repr
    def getLemma(*args): return _wrapper.porter_getLemma(*args)
    def __init__(self, *args): 
        this = _wrapper.new_porter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wrapper.delete_porter
    __del__ = lambda self : None;
porter_swigregister = _wrapper.porter_swigregister
porter_swigregister(porter)

tokenizeNonWords = _wrapper.tokenizeNonWords
removeWords = _wrapper.removeWords


